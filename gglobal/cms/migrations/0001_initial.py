# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-04-25 07:26
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailimages.blocks
import wagtailblocks_cards.blocks
import wagtailmetadata.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0032_add_bulk_delete_page_permission'),
        ('wagtailimages', '0018_remove_rendition_filter'),
        ('cities_light', '0006_compensate_for_0003_bytestring_bug'),
    ]

    operations = [
        migrations.CreateModel(
            name='CityPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('repeat_in_subnav', models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation')),
                ('repeated_item_text', models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text')),
                ('body', wagtail.wagtailcore.fields.StreamField((('home_block', wagtail.wagtailcore.blocks.StructBlock((('h1', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('h4', wagtail.wagtailcore.blocks.TextBlock(required=False)), ('link', wagtail.wagtailcore.blocks.URLBlock(required=False)), ('linktext', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('videolink', wagtail.wagtailcore.blocks.URLBlock(required=False)), ('videotext', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('formh3', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('ortext', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('firstname', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('phone_number', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('button', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('formtext', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('formlink', wagtail.wagtailcore.blocks.URLBlock(required=False)), ('formlinktext', wagtail.wagtailcore.blocks.TextBlock(required=False))))), ('features_block', wagtail.wagtailcore.blocks.StructBlock((('title', wagtail.wagtailcore.blocks.CharBlock()), ('sub', wagtail.wagtailcore.blocks.CharBlock()), ('features_item', wagtailblocks_cards.blocks.CardsBlock(wagtail.wagtailcore.blocks.StructBlock((('title', wagtail.wagtailcore.blocks.CharBlock()), ('sub', wagtail.wagtailcore.blocks.CharBlock()), ('icon', wagtail.wagtailcore.blocks.CharBlock())))))))), ('features_alt_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('h4', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('text', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('icon', wagtail.wagtailcore.blocks.CharBlock(help_text='Смотри иконки тут http://webapplayers.com/luna_admin-v1.2/icons.html')), ('align', wagtail.wagtailcore.blocks.ChoiceBlock(blank=True, choices=[('', 'Картина слева или справа?'), ('left', 'Слева'), ('right', 'Справа')], required=False)), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False)), ('btnlink', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('btntext', wagtail.wagtailcore.blocks.CharBlock(required=False))))), ('price_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock()), ('title', wagtail.wagtailcore.blocks.CharBlock()), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock((('title', wagtail.wagtailcore.blocks.CharBlock()), ('price', wagtail.wagtailcore.blocks.CharBlock()), ('duration', wagtail.wagtailcore.blocks.CharBlock()), ('btntext', wagtail.wagtailcore.blocks.CharBlock()), ('btnlink', wagtail.wagtailcore.blocks.CharBlock()), ('fields', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock((('icon', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('text', wagtail.wagtailcore.blocks.CharBlock())))))))))))), ('clients_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('text', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('clients_list', wagtailblocks_cards.blocks.CardsBlock(wagtail.wagtailcore.blocks.StructBlock((('page', wagtail.wagtailcore.blocks.PageChooserBlock(required=False)), ('link', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('title', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False)))))), ('blocks', wagtailblocks_cards.blocks.CardsBlock(wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('name', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('company', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('city', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False))))))))), ('subscribe_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock()), ('text', wagtail.wagtailcore.blocks.CharBlock()), ('inputtext', wagtail.wagtailcore.blocks.CharBlock()), ('btntext', wagtail.wagtailcore.blocks.CharBlock()), ('smalltext', wagtail.wagtailcore.blocks.CharBlock())))), ('master_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock()), ('text', wagtail.wagtailcore.blocks.CharBlock()))))), blank=True, verbose_name='Home content block')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.City')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities_light.Country')),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailmetadata.models.MetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('repeat_in_subnav', models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation')),
                ('repeated_item_text', models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text')),
                ('body', wagtail.wagtailcore.fields.StreamField((('home_block', wagtail.wagtailcore.blocks.StructBlock((('h1', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('h4', wagtail.wagtailcore.blocks.TextBlock(required=False)), ('link', wagtail.wagtailcore.blocks.URLBlock(required=False)), ('linktext', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('videolink', wagtail.wagtailcore.blocks.URLBlock(required=False)), ('videotext', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('formh3', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('ortext', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('firstname', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('phone_number', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('button', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('formtext', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('formlink', wagtail.wagtailcore.blocks.URLBlock(required=False)), ('formlinktext', wagtail.wagtailcore.blocks.TextBlock(required=False))))), ('features_block', wagtail.wagtailcore.blocks.StructBlock((('title', wagtail.wagtailcore.blocks.CharBlock()), ('sub', wagtail.wagtailcore.blocks.CharBlock()), ('features_item', wagtailblocks_cards.blocks.CardsBlock(wagtail.wagtailcore.blocks.StructBlock((('title', wagtail.wagtailcore.blocks.CharBlock()), ('sub', wagtail.wagtailcore.blocks.CharBlock()), ('icon', wagtail.wagtailcore.blocks.CharBlock())))))))), ('features_alt_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('h4', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('text', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('icon', wagtail.wagtailcore.blocks.CharBlock(help_text='Смотри иконки тут http://webapplayers.com/luna_admin-v1.2/icons.html')), ('align', wagtail.wagtailcore.blocks.ChoiceBlock(blank=True, choices=[('', 'Картина слева или справа?'), ('left', 'Слева'), ('right', 'Справа')], required=False)), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False)), ('btnlink', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('btntext', wagtail.wagtailcore.blocks.CharBlock(required=False))))), ('price_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock()), ('title', wagtail.wagtailcore.blocks.CharBlock()), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock((('title', wagtail.wagtailcore.blocks.CharBlock()), ('price', wagtail.wagtailcore.blocks.CharBlock()), ('duration', wagtail.wagtailcore.blocks.CharBlock()), ('btntext', wagtail.wagtailcore.blocks.CharBlock()), ('btnlink', wagtail.wagtailcore.blocks.CharBlock()), ('fields', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock((('icon', wagtail.wagtailcore.blocks.CharBlock(required=True)), ('text', wagtail.wagtailcore.blocks.CharBlock())))))))))))), ('clients_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('text', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('clients_list', wagtailblocks_cards.blocks.CardsBlock(wagtail.wagtailcore.blocks.StructBlock((('page', wagtail.wagtailcore.blocks.PageChooserBlock(required=False)), ('link', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('title', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False)))))), ('blocks', wagtailblocks_cards.blocks.CardsBlock(wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('name', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('company', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('city', wagtail.wagtailcore.blocks.CharBlock(required=False)), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock(required=False))))))))), ('subscribe_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock()), ('text', wagtail.wagtailcore.blocks.CharBlock()), ('inputtext', wagtail.wagtailcore.blocks.CharBlock()), ('btntext', wagtail.wagtailcore.blocks.CharBlock()), ('smalltext', wagtail.wagtailcore.blocks.CharBlock())))), ('master_block', wagtail.wagtailcore.blocks.StructBlock((('h3', wagtail.wagtailcore.blocks.CharBlock()), ('text', wagtail.wagtailcore.blocks.CharBlock()))))), blank=True, verbose_name='Home content block')),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailmetadata.models.MetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='HomePageMasterPlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'master placement',
                'verbose_name_plural': 'master placements',
            },
        ),
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SurveyFormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.CharField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', max_length=512, verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.wagtailcore.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.wagtailcore.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='surveyformfield',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_form_fields', to='cms.SurveyPage'),
        ),
        migrations.AddField(
            model_name='homepagemasterplacement',
            name='master',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='cms.Master'),
        ),
        migrations.AddField(
            model_name='homepagemasterplacement',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='master_placements', to='cms.HomePage'),
        ),
    ]
